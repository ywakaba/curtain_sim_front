[{"/home/ywakaba/projects/react_projects/koike_simulator/src/routes.js":"1","/home/ywakaba/projects/react_projects/koike_simulator/src/App.js":"2","/home/ywakaba/projects/react_projects/koike_simulator/src/pages/Simulator.js":"3","/home/ywakaba/projects/react_projects/koike_simulator/src/pages/KoikeApp2.js":"4","/home/ywakaba/projects/react_projects/koike_simulator/src/index.js":"5","/home/ywakaba/projects/react_projects/koike_simulator/src/components/Menu.js":"6","/home/ywakaba/projects/react_projects/koike_simulator/src/reportWebVitals.js":"7","/home/ywakaba/projects/react_projects/koike_simulator/src/components/header.jsx":"8","/home/ywakaba/projects/react_projects/koike_simulator/src/pages/KoikeApp.js":"9","/home/ywakaba/projects/react_projects/koike_simulator/src/components/customCheckBoxes.jsx":"10","/home/ywakaba/projects/react_projects/koike_simulator/src/components/customSelectBox.jsx":"11","/home/ywakaba/projects/react_projects/koike_simulator/src/components/imageList.jsx":"12","/home/ywakaba/projects/react_projects/koike_simulator/src/components/clothConditionsSetter.jsx":"13","/home/ywakaba/projects/react_projects/koike_simulator/src/components/colorSelector.jsx":"14"},{"size":249,"mtime":1610402453340,"results":"15","hashOfConfig":"16"},{"size":407,"mtime":1610361771644,"results":"17","hashOfConfig":"16"},{"size":17239,"mtime":1610501552796,"results":"18","hashOfConfig":"16"},{"size":6954,"mtime":1610369622106,"results":"19","hashOfConfig":"16"},{"size":544,"mtime":1610361438207,"results":"20","hashOfConfig":"16"},{"size":2886,"mtime":1608885475446,"results":"21","hashOfConfig":"16"},{"size":362,"mtime":1610359269366,"results":"22","hashOfConfig":"16"},{"size":276,"mtime":1610398308336,"results":"23","hashOfConfig":"16"},{"size":7545,"mtime":1610401726700,"results":"24","hashOfConfig":"16"},{"size":864,"mtime":1610418496537,"results":"25","hashOfConfig":"16"},{"size":668,"mtime":1610442318462,"results":"26","hashOfConfig":"16"},{"size":566,"mtime":1610500790894,"results":"27","hashOfConfig":"16"},{"size":4255,"mtime":1610501410448,"results":"28","hashOfConfig":"16"},{"size":197,"mtime":1610486096957,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5y7vfs",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ywakaba/projects/react_projects/koike_simulator/src/routes.js",[],"/home/ywakaba/projects/react_projects/koike_simulator/src/App.js",[],["65","66"],"/home/ywakaba/projects/react_projects/koike_simulator/src/pages/Simulator.js",["67","68","69","70","71","72","73"],"import React, { useState, useRef, useEffect } from \"react\";\n//import ReactDOM from 'react-dom';\nimport { Layout, Row, Col, Slider } from \"antd\";\n// import {\n//   UpOutlined,\n//   LeftOutlined,\n//   DownOutlined,\n//   RightOutlined,\n// } from \"@ant-design/icons\";\nimport { ColorSelector } from '../components/colorSelector';\nimport \"antd/dist/antd.css\";\nimport \"./simulator.css\";\nimport { ClothConditionsSetter } from \"../components/clothConditionsSetter\";\n\nconst laces = [\n  \"/images/lace_curtains/lace_1.png\",\n  \"/images/lace_curtains/lace_2.png\",\n  \"/images/lace_curtains/lace_3.png\",\n];\nconst curtains = [\n  \"/images/curtains/curtain_1.png\",\n  \"/images/curtains/curtain_2.png\",\n  \"/images/curtains/curtain_3.png\",\n  \"/images/curtains/curtain_4.png\",\n  \"/images/curtains/curtain_5.png\",\n];\n\nconst style = {\n//  backgroundColor: \"#ffffff\",\n  width: \"800px\",\n//  padding: \"8px\",\n//  margin: \"8px\",\n//  borderRadius: \"8px\"\n};\n// const ImageList = ({ images, setSelected, selectedImage }) => (\n//   <div className=\"images-container\">\n//     {images.map((image, i) => (\n//       <div key={i} className=\"image-container\">\n//         <img\n//           alt=\"\"\n//           className={`image-item ${selectedImage === i && \"selected\"}`}\n//           src={image}\n//           onClick={() => {\n//             if (i === selectedImage) setSelected(null);\n//             else {\n//               setSelected(i);\n//             }\n//           }}\n//         />\n//       </div>\n//     ))}\n//   </div>\n// );\n\nvar lastPosition = { x: 0, y: 0 };\nfunction Simulator() {\n  const [selectedCurtain, setCurtain] = useState(null);\n  const [selectedLace, setLace] = useState(null);\n  const [baseImage, setBaseImage] = useState(null);\n  const canvasRef = useRef();\n  const [state, setState] = useState({\n    crop: { x: 0, y: 0 },\n    zoom: 1,\n    minZoom: 1,\n    maxZoom: 3,\n    pickColor: false,\n    color: { r: 0, g: 0, b: 0, hex: \"\" },\n  });\n\n  const [dragState, setDrag] = useState({\n    dragged: false,\n    lastPosition: { x: 0, y: 0 },\n    startPosition: { x: 0, y: 0 },\n  });\n\n  // const move = (direction) => {\n  //   switch (direction) {\n  //     case \"left\":\n  //       window.requestAnimationFrame(this.zoom);\n  //       return;\n  //     case \"right\":\n  //       window.requestAnimationFrame(this.zoom);\n  //       return;\n  //     case \"up\":\n  //       window.requestAnimationFrame(this.zoom);\n  //       return;\n  //     case \"down\":\n  //       window.requestAnimationFrame(this.zoom);\n  //       return;\n  //   }\n  // };\n\n  const [clothType, setClothType] = useState('lace');\n\n  const [stage, setStage] = useState('setConditions');\n\n  useEffect(() => {\n    resetCanvas();\n  }, [baseImage]);\n\n  useEffect(() => {\n    if (baseImage)\n      drawCanvas(\n        dragState.lastPosition.x,\n        dragState.lastPosition.y,\n        state.zoom\n      );\n  }, [state.zoom, baseImage]);\n\n  const resetCanvas = () => {\n    lastPosition = { x: 0, y: 0 };\n    setDrag({ ...dragState, lastPosition: { x: 0, y: 0 } });\n    setState({ ...state, zoom: 1 });\n    drawCanvas(0, 0, 1);\n  };\n\n  const drawCanvas = (x, y, zoom) => {\n    let canvas = canvasRef.current;\n    let context = canvas.getContext(\"2d\");\n    // let rect = canvas.getBoundingClientRect();\n    let Img = new Image();\n    Img.src = baseImage;\n    Img.onload = () => {\n      // Draw canvas when image loaded\n\n      // let width, height;\n      // let ratio = Img.width / Img.height;\n\n      // width = Img.width;\n      // height = Img.height;\n\n      // keep the aspect ratio\n      // if (width <= height) {\n      //   height = height * ratio;\n      //   console.log(canvas.width - width);\n      // } else {\n      //   width = width * ratio;\n      // }\n      context.clearRect(0, 0, canvas.width, canvas.height);\n      // if (x <= 0) {\n      //   x = maxLeft;\n      // } else if (x >= maxRight) {\n      //   x = maxRight;\n      // }\n      // if (y >= maxTop) {\n      //   y = maxTop;\n      // } else if (y <= maxBottom) {\n      //   y = maxBottom;\n      // }\n      context.drawImage(\n        Img,\n        x,\n        y,\n        // width,\n        // height,\n        // 0,\n        // 0,\n        canvas.width * zoom,\n        canvas.height * zoom\n      );\n      lastPosition = { x: x, y: y };\n    };\n  };\n\n  const startDrag = (e) => {\n    let canvas = canvasRef.current;\n    let rect = canvas.getBoundingClientRect();\n\n    let clientX, clientY;\n    if (e.touches) {\n      clientX = e.touches[0].clientX;\n      clientY = e.touches[0].clientY;\n    } else {\n      clientX = e.clientX;\n      clientY = e.clientY;\n    }\n    let x = clientX - rect.left;\n    let y = clientY - rect.top;\n\n    setDrag({\n      ...dragState,\n      dragged: true,\n      startPosition: { x: x, y: y },\n    });\n    return false;\n  };\n\n  const dragImage = (e) => {\n    if (dragState.dragged) {\n      let canvas = canvasRef.current;\n      let rect = canvas.getBoundingClientRect();\n\n      let clientX, clientY;\n      if (e.touches) {\n        clientX = e.touches[0].clientX;\n        clientY = e.touches[0].clientY;\n      } else {\n        clientX = e.clientX;\n        clientY = e.clientY;\n      }\n\n      let x = clientX - rect.left;\n      let y = clientY - rect.top;\n      x = dragState.lastPosition.x + x - dragState.startPosition.x;\n      y = dragState.lastPosition.y + y - dragState.startPosition.y;\n      drawCanvas(x, y, state.zoom);\n    }\n    return false;\n  };\n\n  const endDrag = (e) => {\n    setDrag({\n      ...dragState,\n      lastPosition: lastPosition,\n      dragged: false,\n    });\n    return false;\n  };\n\n  const getColor = (e) => {\n    let canvas = canvasRef.current;\n    let context = canvas.getContext(\"2d\");\n    let rect = canvas.getBoundingClientRect();\n    let clientX, clientY;\n    if (e.touches) {\n      clientX = e.touches[0].clientX;\n      clientY = e.touches[0].clientY;\n    } else {\n      clientX = e.clientX;\n      clientY = e.clientY;\n    }\n    let x = clientX - rect.left;\n    let y = clientY - rect.top;\n    x = x * (canvas.width / rect.width);\n    y = y * (canvas.height / rect.height);\n    let color = context.getImageData(x, y, 1, 1).data;\n    setState({\n      ...state,\n      color: {\n        r: color[0],\n        g: color[1],\n        b: color[2],\n        a: color[3],\n        hex: rgbToHex(color[0], color[1], color[2]),\n      },\n    });\n    return false;\n  };\n\n  function componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n  }\n  function rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n  }\n\n  const onClickLace = () => {\n    setClothType('lace');\n  };\n\n  const onClickDrape = () => {\n    setClothType('drape');\n  };\n\n  const onClickBack = () => {\n    alert('戻る');\n  };\n\n  const onClickDeside = () => {\n    alert('決定');\n  };\n\n  return (\n    <div style={style}>\n      <Layout className=\"container\">\n        <Layout.Content>\n          <Col span={24} style={{ padding: \"0 12px\" }}>\n            <Row>\n              <Col span={24} style={{ display: baseImage ? \"block\" : \"none\" }}>\n                <div className=\"processed-image-container\">\n                  <div className=\"processed-image-base\">\n                    <canvas\n                      ref={canvasRef}\n                      id=\"result-canvas\"\n                      width=\"600\"\n                      height=\"400\"\n                      style={{\n                        border: \"1px solid #333\",\n                        width: \"100%\",\n                        height: \"100%\",\n                      }}\n                    />\n                    <div\n                      className=\"canvas-controller\"\n                      style={{\n                        cursor: state.pickColor\n                          ? \"crosshair\"\n                          : dragState.dragged\n                          ? \"move\"\n                          : \"auto\",\n                      }}\n                      onClick={() => {\n                        if (state.pickColor) {\n                          setState({ ...state, pickColor: false });\n                        }\n                      }}\n                      onWheel={(e) => {\n                        let zoom = state.zoom - e.deltaY / 100;\n                        if (zoom >= state.maxZoom) zoom = state.maxZoom;\n                        if (zoom <= state.minZoom) zoom = state.minZoom;\n                        setState({ ...state, zoom: zoom });\n                      }}\n                      onMouseDown={startDrag}\n                      onMouseUp={endDrag}\n                      onMouseMove={state.pickColor ? getColor : dragImage}\n                      onTouchStart={startDrag}\n                      onTouchMove={state.pickColor ? getColor : dragImage}\n                      onTouchEnd={endDrag}\n                    ></div>\n                    {selectedLace !== null && (\n                      <img\n                        alt=\"\"\n                        className=\"processed-image-lace\"\n                        src={laces[selectedLace]}\n                      />\n                    )}\n                    {selectedCurtain !== null && (\n                      <img\n                        alt=\"\"\n                        className=\"processed-image-curtain\"\n                        src={curtains[selectedCurtain]}\n                      />\n                    )}\n                  </div>\n                </div>\n              </Col>\n            </Row>\n            <br />\n            {baseImage && (\n              <Row justify=\"center\" align=\"middle\" gutter={[8, 8]}>\n                <Col xs={4} md={2} lg={1}>\n                  <label>Zoom</label>\n                </Col>\n                <Col xs={20} md={18} lg={18}>\n                  <Slider\n                    value={state.zoom}\n                    min={1}\n                    max={3}\n                    step={0.01}\n                    onChange={(zoom) => {\n                      setState({ ...state, zoom: zoom });\n                    }}\n                  />\n                </Col>\n              </Row>\n            )}\n\n            {baseImage && (\n              <Row justify=\"center\" align=\"middle\" gutter={[16, 16]}>\n                <Col\n                  xs={12}\n                  md={4}\n                  lg={4}\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <button className=\"ant-btn full\" onClick={resetCanvas}>\n                    Reset Position\n                  </button>\n                </Col>\n                <Col\n                  xs={12}\n                  md={4}\n                  lg={4}\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <button\n                    className={`ant-btn full ${\n                      state.pickColor && \"btn-active\"\n                    }`}\n                    onClick={() => {\n                      setState({ ...state, pickColor: !state.pickColor });\n                    }}\n                  >\n                    Pick Color\n                  </button>\n                </Col>\n                <Col\n                  xs={24}\n                  md={4}\n                  lg={4}\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"center\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <div\n                    style={{\n                      margin: 4,\n                      height: 25,\n                      width: 200,\n                      border: \"1px solid #333\",\n                      backgroundColor: `rgba(${state.color.r},${state.color.g},${state.color.b},${state.color.a})`,\n                    }}\n                  />\n                </Col>\n                <Col xs={24} md={8} lg={8}>\n                  <div className=\"space-evenly\">\n                    <div>\n                      <label>RGB:</label>\n                      <span>\n                        ({state.color.r},{state.color.g},{state.color.b})\n                      </span>\n                    </div>\n                    <div>\n                      <label>Hex:</label> <span>{state.color.hex}</span>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            )}\n            <Row justify=\"center\">\n              <Col>\n                <label htmlFor=\"image-base\" className=\"ant-btn\">\n                  Select Image\n                </label>\n                <input\n                  id=\"image-base\"\n                  style={{ display: \"none\" }}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => {\n                    let file = e.target.files[0];\n                    const reader = new FileReader();\n                    reader.onloadend = () => {\n                      setBaseImage(reader.result);\n                    };\n                    if (file) {\n                      reader.readAsDataURL(file);\n                      setBaseImage(reader.result);\n                    } else {\n                      setBaseImage(null);\n                    }\n                  }}\n                />\n              </Col>\n            </Row>\n\n            {/* <Row justify=\"center\">\n              <Col xs={12} md={18} lg={18}>\n                <Slider\n                  defaultValue={state.zoom}\n                  min={1}\n                  max={5}\n                  step={0.1}\n                  onChange={(zoom) => {\n                    setState({ ...state, zoom: zoom });\n                  }}\n                />\n              </Col>\n\n              <Row justify=\"center\">\n                <Col span={8}>\n                  <Button\n                    icon={<UpOutlined />}\n                    onMouseDown={() => {\n                      console.log(state.crop.y++);\n                      setState({\n                        ...state,\n                        crop: { ...state.crop, y: state.crop.y++ },\n                      });\n                    }}\n                  />\n                </Col>\n              </Row>\n              <Row justify=\"center\">\n                <Col span={8}>\n                  <Button\n                    onMouseDown={() => {\n                      console.log(state.crop.x--);\n                      setState({\n                        ...state,\n                        crop: { ...state.crop, x: state.crop.x-- },\n                      });\n                    }}\n                    icon={<LeftOutlined />}\n                  />\n                </Col>\n                <Col span={8}></Col>\n                <Col span={8}>\n                  <Button\n                    onMouseDown={() => {\n                      console.log(state.crop.x++);\n                      setState({\n                        ...state,\n                        crop: { ...state.crop, x: state.crop.x++ },\n                      });\n                    }}\n                    icon={<RightOutlined />}\n                  />\n                </Col>\n              </Row>\n              <Row justify=\"center\">\n                <Col span={8}>\n                  <Button\n                    onMouseDown={() => {\n                      console.log(state.crop.y--);\n                      setState({\n                        ...state,\n                        crop: { ...state.crop, y: state.crop.y-- },\n                      });\n                    }}\n                    icon={<DownOutlined />}\n                  />\n                </Col>\n              </Row>\n            </Row> */}\n            {/* {baseImage && (\n              <Row gutter={[16, 16]}>\n                <Col span={24}>\n                  <ImageList\n                    images={laces}\n                    setSelected={setLace}\n                    selectedImage={selectedLace}\n                  />\n                </Col>\n              </Row>\n            )}\n            {baseImage && (\n              <Row gutter={[16, 16]}>\n                <Col span={24}>\n                  <ImageList\n                    images={curtains}\n                    setSelected={setCurtain}\n                    selectedImage={selectedCurtain}\n                  />\n                </Col>\n              </Row>\n            )} */}\n          </Col>\n        </Layout.Content>\n        <div className='center'><div className='arrow_box center' style={{margin: '20px 0'}}>条件設定を選択してください</div></div>\n        <div className=\"d-flex flex-row center\">\n          <button id='btnLace' className=\"btn btn-success\" onClick={onClickLace}>①レースカーテン生地</button>\n          <button id='btnDrape' className=\"btn btn-success\" onClick={onClickDrape}>②ドレープカーテン生地</button>\n        </div>\n        <ClothConditionsSetter clothType={clothType} />\n        <div className=\"d-flex flex-row\" style={{margin: '20px auto'}}>\n          <button id=\"btnBack\" className=\"btn btn-secondary btn-lg\"  onClick={onClickBack}>＜　戻る</button>\n          <button id=\"btnDeside\" className=\"btn btn-danger btn-lg\" onClick={onClickDeside}>決定　＞</button>\n        </div>\n      </Layout>\n    </div>\n  );\n}\nexport default Simulator;\n","/home/ywakaba/projects/react_projects/koike_simulator/src/pages/KoikeApp2.js",[],"/home/ywakaba/projects/react_projects/koike_simulator/src/index.js",[],["74","75"],"/home/ywakaba/projects/react_projects/koike_simulator/src/components/Menu.js",["76"],"import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Menu extends React.Component {\n  // コンストラクタ\n  constructor(props){\n    super(props);\n\n    // メニューを表示するdiv要素を参照するための変数です。\n    this.menuElm = null;\n\n    // イベントハンドラのバインド\n    this.onCloseButtonClick = this.onCloseButtonClick.bind(this);\n    this.onMenuItemClick = this.onMenuItemClick.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n\n    // メニューに表示するアイテムの配列\n    this.messages = [\"写真またはビデオを選択\", \"写真またはビデオを撮る\", \"書類をスキャン\"];\n\n  }\n\n  // メニュー要素を表示(visibility=\"visible\")します。\n  // 親要素から、呼び出されるメソッドです。\n  show(clientX, clientY) {\n    // 以下のようにstyle.top,style.leftを指定することで、好きな場所にメニューを表示できます。\n    this.menuElm.style.top = clientY + \"px\";\n    this.menuElm.style.left = clientX + \"px\";\n    this.menuElm.style.visibility = \"visible\";\n\n    // 表示したらフォーカスを割り当てます。\n    // (これで、keyイベントを受け付けてくれるようになります。)\n    this.menuElm.focus();\n  }\n\n  // メニューを閉じ(visibility=\"hidden\"に変更し)ます。\n  close() {\n    this.menuElm.style.visibility = \"hidden\";\n  }\n\n  // \"close\"クリック時のイベントハンドラ\n  onCloseButtonClick() {\n    // close()を呼び出します。\n    this.close();\n  }\n\n  // メニューアイテムクリック時のイベントハンドラ\n  onMenuItemClick(event) {\n    // 自分自身を閉じて\n    this.close();\n\n    // 親要素から渡されたコールバック関数を呼び出します。\n    // 引数には、アイテムに表示されているテキストを渡します。\n    this.props.onMenuItemClick(event.target.innerHTML);\n  }\n\n  // エスケープキーで閉じるためのイベントハンドラです。\n  onKeyUp(event) {\n    event.preventDefault();\n    // 文字列で比較できるとは思いませんでした。。\n    if (\"Escape\" == event.key) {\n      this.close();\n    }\n  }\n\n  // レンダラー\n  render(){\n    return (\n      <React.Fragment>\n        { /* refで要素を参照することで、styleの変更ができるようになります。 */ }\n        <div className=\"MenuBox\" ref={(node) => this.menuElm = node} onKeyUp={this.onKeyUp} tabIndex=\"0\" >\n          {\n            this.messages.map((message) =>\n              <div className=\"MenuItem\" onClick={this.onMenuItemClick} key={ message }>{ message }</div>\n            )\n          }\n          <div className=\"MenuItem\" onClick={this.onCloseButtonClick}>Close</div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nMenu.propTypes = {\n  onMenuItemClick: PropTypes.func\n};\n\nexport default Menu;\n","/home/ywakaba/projects/react_projects/koike_simulator/src/reportWebVitals.js",[],["77","78"],"/home/ywakaba/projects/react_projects/koike_simulator/src/components/header.jsx",[],"/home/ywakaba/projects/react_projects/koike_simulator/src/pages/KoikeApp.js",["79","80","81","82","83"],"import React, { Component , useState, useRef, useEffect }  from 'react';\n//import ReactDOM from 'react-dom';\nimport { Link } from 'react-router-dom';\n// import { withRouter } from \"react-router-dom\";\n// import { BrowserRouter as Router, Route } from 'react-router-dom';\n// import { useHistory } from 'react-router-dom';\n// import PropTypes from 'prop-types'\nimport { Header } from '../components/header';\nimport Menu from '../components/Menu';\nimport \"../styles.css\";\n\n// import Simulator from './Simulator';\n// const [stage, setStage] = React.useState(0);\n// const history = useHistory();\n// const handleLink = path => this.history.push(path);\nconst style = {\n  backgroundColor: \"#ffffff\",\n  width: \"600px\",\n//  padding: \"8px\",\n//  margin: \"0 0 0 0\",\n//  borderRadius: \"8px\"\n};\n\nconst btn_margin = {\n  margin: \"10px 0\"\n}\n\nexport const KoikeApp = () => {\n  const [stage, setStage] = useState(0);\n\n    // class KoikeApp2 extends Component {\n// function KoikeApp() {\n  const onClickCg = () => {\n    setStage(1);\n  };\n\n  const onClickPhoto = () => {\n    setStage(2);\n  };\n\n//   static propTypes = {\n//     match: PropTypes.object.isRequired,\n//     location: PropTypes.object.isRequired,\n//     history: PropTypes.object.isRequired\n//   }\n  //コンストラクタ内でstateにtodosを宣言\n  // constructor() {\n  //   super();\n  //   this.state = {\n  //     stage: 0\n  //   }\n  //   // メニュー要素への参照を初期化（後ほどレンダラーの中でrefを割り当てます。）\n  //   this.menu = null;\n  //   // イベントハンドラのバインド\n  //   this.onContextMenu = this.onContextMenu.bind(this);\n  //   this.onMenuItemClick = this.onMenuItemClick.bind(this);\n  //   this.onCurtainButtonClick = this.onCurtainButtonClick.bind(this);\n  //   this.onPhotoClick = this.onPhotoClick.bind(this);\n\n  //   this.toCg = this.toCg.bind(this);\n  //   this.toPhoto = this.toPhoto.bind(this);\n  //   this.toCurtainPhoto = this.toCurtainPhoto.bind(this);\n  //   // this.handleClick = e => {\n  //   //   this.props.history.push(\"/Simulate\");\n  //   // };\n  // }\n    // ＣＧボタンがクリックされたら\n    // toCg() {\n    //   this.setState({stage: 1});\n    // }\n    // // 写真ボタンがクリックされたら\n    // toPhoto() {\n    //     this.setState({stage: 2});\n    // }\n\n    // // カーテンボタンがクリックされたら\n    // toCurtainPhoto() {\n    //     this.setState({stage: 2});\n    //   }\n\n    // // 右クリックイベントハンドラ\n    // onContextMenu(event) {\n    //   // preventDefault()を忘れると、普通の右クリックメニューが表示されますよ。\n    //   event.preventDefault();\n\n    //   // メニュー要素の\"show()\"メソッドを呼び出します。\n    //   // 引数にはマウスポインタの位置情報を渡してあげます。\n    //   this.menu.show(event.clientX, event.clientY);\n    // }\n\n    // 右クリックメニューでメニューが選択された際にコールバックしてもらうメソッドです。\n    // 選択されたメニューの内容(innnerHTML)をstateに設定しています。\n    // (これにより、画面左上のメッセージが切り替わるはず。)\n    // onMenuItemClick(message) {\n    //   switch (message) {\n    //     case '写真またはビデオを選択':\n    //       this.handleClick('/Simulate');\n    //       break;\n    //     case '写真またはビデオを撮る':\n    //       this.handleClick('/Simulate');\n    //       break;\n    //     case '書類をスキャン':\n    //       this.handleClick('/Simulate');\n    //       break;\n    //     default: break;\n    //   }\n    //   this.setState({message: message});\n    // }\n\n    // onCurtainButtonClick(event){\n    // //   console.log(event);\n    // //   this.menu.show(event.clientX, event.clientY);\n    //   // 要素を取得\n    //   let ele = document.getElementById('photo_buttons');\n    //   // 現在の display プロパティの値を保持\n    //   // none に設定して非表示\n    //   ele.style.display = 'block';\n    // }\n    // onPhotoClick(event){\n    //     console.log(event);\n    //     this.menu.show(event.clientX, event.clientY);\n    //     // 要素を取得\n    //     let ele = document.getElementById('photo_buttons');\n    //     // 現在の display プロパティの値を保持\n    //     // none に設定して非表示\n    //     ele.style.display = 'block';\n    //   }\n      //テーブルの骨組みを描画し、行の描画はRenderRowsに任せる（その際、todosを渡す）\n    //render() {\n      return (\n          // <div  style={style} onContextMenu={this.onContextMenu} >\n          <div style={style}>\n            <Header />\n            {/* { this.state.message } */}\n            { /* コンポーネントもrefで参照できるので、子要素のメソッドを呼び出すことが可能になります。 */ }\n            {/* <Menu onMenuItemClick={this.onMenuItemClick} ref={(node) => this.menu = node} /> */}\n            <div className=\"row d-block text-center\">\n              { stage === 0 ? <Guidance /> : null }\n              <div className='center arrow_box'>{ stage === 0 ? 'まずはベースの画像を選択してください' : '装飾アイテムを選択してください' }</div>\n            </div>\n            <div className=\"d-flex flex-column\">\n              <button className=\"btn btn-primary btn-lg\" onClick={onClickCg}>ＣＧ</button>\n              { stage === 1 ? <CgButtons /> : null}\n              <button className=\"btn btn-danger btn-lg\" onClick={onClickPhoto}>写真</button>\n              { stage === 2 ? <PhotoButtons /> : null }\n            </div>\n          </div>\n      );\n    //}\n}\n//export default withRouter(KoikeApp);\n\n\nconst Guidance = () => (\n  <div className=\"text-center\">\n    <div className=\"col-12\">\n      <h5 className=\"my-3 text-success\">Window decoration</h5>\n    </div>\n    <div className=\"col-12\">\n      <h5 className=\"my-3 text-success\">シミュレーション</h5>\n    </div>\n    <div className=\"col-12\">\n      <h6 className=\"my-3 text-success\">着せ替えシミュレーションを使って</h6>\n    </div>\n    <div className=\"col-12\">\n      <h6 className=\"my-3 text-success\">お気に入りのコーディネートを見つけましょう。</h6>\n    </div>\n  </div>\n)\n\nconst CgButtons = () => (\n  <div>\n    <button className=\"btn btn-primary\">カーテン</button>\n    <button className=\"btn btn-secondary\">ローマンシェード</button>\n    <button className=\"btn btn-success\">ロールスクリーン</button>\n    <button className=\"btn btn-dark\">壁紙</button>\n  </div>\n)\n\nconst PhotoButtons = () => {\n  const onClickCurtain = () => {\n    document.getElementById('photo_buttons').style.display='block';\n  };\n\n  return (\n    <div>\n      <button className=\"btn btn-primary\" data-toggle=\"collapse\" data-target=\"#photo_buttons\" aria-expanded=\"false\" aria-controls=\"photo_buttons\"\n       onClick={onClickCurtain}>カーテン</button>\n      <div id='photo_buttons' className=\"collapse\">\n        <Link to=\"/simulate\">写真またはビデオを選択</Link><br/>\n        <Link to=\"/simulate\">写真またはビデオを撮る</Link><br/>\n        <Link to=\"/simulate\">書類をスキャン</Link>\n      </div>\n      <button className=\"btn btn-secondary\">ローマンシェード</button>\n      <button className=\"btn btn-success\">ロールスクリーン</button>\n      <button className=\"btn btn-dark\">壁紙</button>\n    </div>\n  );\n}\n\n//ReactDOM.render(<KoikeApp2 />, document.getElementById('todoApp'));\n","/home/ywakaba/projects/react_projects/koike_simulator/src/components/customCheckBoxes.jsx",[],"/home/ywakaba/projects/react_projects/koike_simulator/src/components/customSelectBox.jsx",["84","85"],"import React from \"react\";\r\n\r\nexport const CustomSelectBox = (props) => {\r\n  const { options, defaultValue } = props;\r\n  // const { options } = props;\r\n  const prices = [\r\n    { value: \"all_prices\", label: \"すべての価格\" },\r\n    { value: \"ge_600000\", label: \"60,000～\" },\r\n    { value: \"lt_600000\", label: \"～59,999\" },\r\n    { value: \"le_400000\", label: \"～40,000\" },\r\n    { value: \"le_200000\", label: \"～20,000\" },\r\n    { value: \"le_100000\", label: \"～10,000\" }\r\n  ];\r\n  return (\r\n    <select>\r\n    {options.map((opt, index) => {\r\n        return (\r\n          <option value={opt.value}>{opt.label}</option>\r\n        );\r\n      })}\r\n    </select>\r\n   );\r\n};\r\n","/home/ywakaba/projects/react_projects/koike_simulator/src/components/imageList.jsx",[],"/home/ywakaba/projects/react_projects/koike_simulator/src/components/clothConditionsSetter.jsx",["86","87","88","89","90","91"],"/home/ywakaba/projects/react_projects/koike_simulator/src/components/colorSelector.jsx",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":10,"column":10,"nodeType":"98","messageId":"99","endLine":10,"endColumn":23},{"ruleId":"96","severity":1,"message":"100","line":57,"column":27,"nodeType":"98","messageId":"99","endLine":57,"endColumn":37},{"ruleId":"96","severity":1,"message":"101","line":58,"column":24,"nodeType":"98","messageId":"99","endLine":58,"endColumn":31},{"ruleId":"96","severity":1,"message":"102","line":95,"column":10,"nodeType":"98","messageId":"99","endLine":95,"endColumn":15},{"ruleId":"96","severity":1,"message":"103","line":95,"column":17,"nodeType":"98","messageId":"99","endLine":95,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":99,"column":6,"nodeType":"106","endLine":99,"endColumn":17,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":108,"column":6,"nodeType":"106","endLine":108,"endColumn":29,"suggestions":"109"},{"ruleId":"92","replacedBy":"110"},{"ruleId":"94","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":60,"column":18,"nodeType":"114","messageId":"115","endLine":60,"endColumn":20},{"ruleId":"92","replacedBy":"116"},{"ruleId":"94","replacedBy":"117"},{"ruleId":"96","severity":1,"message":"118","line":1,"column":17,"nodeType":"98","messageId":"99","endLine":1,"endColumn":26},{"ruleId":"96","severity":1,"message":"119","line":1,"column":39,"nodeType":"98","messageId":"99","endLine":1,"endColumn":45},{"ruleId":"96","severity":1,"message":"120","line":1,"column":47,"nodeType":"98","messageId":"99","endLine":1,"endColumn":56},{"ruleId":"96","severity":1,"message":"121","line":9,"column":8,"nodeType":"98","messageId":"99","endLine":9,"endColumn":12},{"ruleId":"96","severity":1,"message":"122","line":24,"column":7,"nodeType":"98","messageId":"99","endLine":24,"endColumn":17},{"ruleId":"96","severity":1,"message":"123","line":4,"column":20,"nodeType":"98","messageId":"99","endLine":4,"endColumn":32},{"ruleId":"96","severity":1,"message":"124","line":6,"column":9,"nodeType":"98","messageId":"99","endLine":6,"endColumn":15},{"ruleId":"96","severity":1,"message":"125","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":16},{"ruleId":"96","severity":1,"message":"126","line":3,"column":28,"nodeType":"98","messageId":"99","endLine":3,"endColumn":34},{"ruleId":"96","severity":1,"message":"127","line":24,"column":12,"nodeType":"98","messageId":"99","endLine":24,"endColumn":27},{"ruleId":"96","severity":1,"message":"100","line":24,"column":29,"nodeType":"98","messageId":"99","endLine":24,"endColumn":39},{"ruleId":"96","severity":1,"message":"128","line":27,"column":11,"nodeType":"98","messageId":"99","endLine":27,"endColumn":23},{"ruleId":"96","severity":1,"message":"129","line":51,"column":11,"nodeType":"98","messageId":"99","endLine":51,"endColumn":19},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],"no-unused-vars","'ColorSelector' is defined but never used.","Identifier","unusedVar","'setCurtain' is assigned a value but never used.","'setLace' is assigned a value but never used.","'stage' is assigned a value but never used.","'setStage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'resetCanvas'. Either include it or remove the dependency array.","ArrayExpression",["132"],"React Hook useEffect has missing dependencies: 'dragState.lastPosition.x', 'dragState.lastPosition.y', and 'drawCanvas'. Either include them or remove the dependency array.",["133"],["130"],["131"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["130"],["131"],"'Component' is defined but never used.","'useRef' is defined but never used.","'useEffect' is defined but never used.","'Menu' is defined but never used.","'btn_margin' is assigned a value but never used.","'defaultValue' is assigned a value but never used.","'prices' is assigned a value but never used.","'Layout' is defined but never used.","'Slider' is defined but never used.","'selectedCurtain' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'curtains' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [baseImage, resetCanvas]",{"range":"138","text":"139"},"Update the dependencies array to be: [state.zoom, baseImage, drawCanvas, dragState.lastPosition.x, dragState.lastPosition.y]",{"range":"140","text":"141"},[2663,2674],"[baseImage, resetCanvas]",[2836,2859],"[state.zoom, baseImage, drawCanvas, dragState.lastPosition.x, dragState.lastPosition.y]"]